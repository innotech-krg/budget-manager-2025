name: 🔄 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =================================
  # LINTING & CODE QUALITY
  # =================================
  lint:
    name: 🔍 Lint & Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: 🔍 Lint Frontend
        run: cd frontend && npm run lint

      - name: 🔍 Lint Backend
        run: cd backend && npm run lint

      - name: 🎨 Check Code Formatting
        run: |
          cd frontend && npm run format:check
          cd ../backend && npm run format:check

  # =================================
  # UNIT TESTS
  # =================================
  test-unit:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: 🧪 Run Frontend Tests
        run: cd frontend && npm run test:coverage

      - name: 🧪 Run Backend Tests
        run: cd backend && npm run test:coverage

      - name: 📊 Upload Coverage Reports
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info,./backend/coverage/lcov.info
          fail_ci_if_error: false

  # =================================
  # INTEGRATION TESTS
  # =================================
  test-integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: budget_manager_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: 🔧 Setup Test Environment
        run: |
          cp backend/.env.example backend/.env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/budget_manager_test" >> backend/.env.test
          echo "REDIS_URL=redis://localhost:6379" >> backend/.env.test

      - name: 🧪 Run Integration Tests
        run: cd backend && npm run test:integration
        env:
          NODE_ENV: test

  # =================================
  # E2E TESTS
  # =================================
  test-e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration]
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: 🎭 Install Playwright
        run: cd frontend && npx playwright install --with-deps

      - name: 🚀 Start Application
        run: |
          cp backend/.env.example backend/.env
          npm run start:test &
          sleep 30

      - name: 🎭 Run E2E Tests
        run: cd frontend && npm run test:e2e

      - name: 📸 Upload E2E Screenshots
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-screenshots
          path: frontend/test-results/

  # =================================
  # SECURITY SCAN
  # =================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔒 Run Security Audit
        run: |
          npm audit --audit-level high
          cd frontend && npm audit --audit-level high
          cd ../backend && npm audit --audit-level high

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  # =================================
  # DOCKER BUILD & PUSH
  # =================================
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [test-unit, test-integration, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🐳 Build and Push Frontend Image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          target: production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🐳 Build and Push Backend Image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ github.sha }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # =================================
  # DEPLOYMENT
  # =================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test-e2e, docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: https://staging.budget-manager.com
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Hier würde der tatsächliche Deployment-Code stehen
          echo "✅ Staging deployment completed"

  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://budget-manager.com
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to Production
        run: |
          echo "🌟 Deploying to production environment..."
          # Hier würde der tatsächliche Deployment-Code stehen
          echo "✅ Production deployment completed"

      - name: 📢 Notify Deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: 'Budget Manager 2025 wurde erfolgreich in Production deployed! 🎉'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
